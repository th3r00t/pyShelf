.TH "src.backend.lib.storage.Storage" 3 "Sat Aug 9 2025 19:53:55" "Version 0.8.0" "pyShelf Open Source Ebook Server" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src.backend.lib.storage.Storage
.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fB__init__\fP (self, config)"
.br
.ti -1c
.RI "\fBget_connection_string\fP (self)"
.br
.ti -1c
.RI "\fBcreate_tables\fP (self)"
.br
.ti -1c
.RI "\fBinsert_book\fP (self, book)"
.br
.ti -1c
.RI "\fBbook_paths_list\fP (self)"
.br
.ti -1c
.RI "list() \fBparse_collections_from_path\fP (self, dict() book)"
.br
.ti -1c
.RI "\fBmake_collections\fP (self)"
.br
.ti -1c
.RI "\fBget_books\fP (self, collection=None, skip=None, limit=None)"
.br
.ti -1c
.RI "\fBget_book\fP (self, id)"
.br
.ti -1c
.RI "\fBget_collections\fP (self)"
.br
.ti -1c
.RI "\fBget_collection\fP (self, name)"
.br
.ti -1c
.RI "dict \fBparse_advanced_query\fP (self, str query)"
.br
.ti -1c
.RI "\fBfuzzy_search_books\fP (self, str query, int limit=30)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBconfig\fP = config"
.br
.ti -1c
.RI "\fBsql\fP = self\&.config\&.catalogue_db"
.br
.ti -1c
.RI "\fBuser\fP = self\&.config\&.user"
.br
.ti -1c
.RI "\fBpassword\fP = self\&.config\&.password"
.br
.ti -1c
.RI "\fBdb_host\fP = self\&.config\&.db_host"
.br
.ti -1c
.RI "\fBdb_port\fP = self\&.config\&.db_port"
.br
.ti -1c
.RI "\fBengine\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 

.PP
.nf
Create a new Storage object\&.

>>> db = Storage(config)

Parameters
----------
config : Config()
    Main program configuration\&.

Attributes
----------
config : Stores configuration
sql : Database Name
user : Database User Name
password : Database Password
db_host : Database Host
db_port : Database Port
engine : sqlalchemy\&.create_engine(url, executor, kw)

.fi
.PP
 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "src\&.backend\&.lib\&.storage\&.Storage\&.__init__ ( self,  config)"

.PP
.nf
Initialize storage object\&.
.fi
.PP
 
.SH "Member Function Documentation"
.PP 
.SS "src\&.backend\&.lib\&.storage\&.Storage\&.book_paths_list ( self)"

.PP
.nf
Get file paths from database for comparison to system files\&.

Returns
-------
_result : ScalarResult Object

.fi
.PP
 
.SS "src\&.backend\&.lib\&.storage\&.Storage\&.create_tables ( self)"

.PP
.nf
Create table structure\&.
.fi
.PP
 
.SS "src\&.backend\&.lib\&.storage\&.Storage\&.fuzzy_search_books ( self, str query, int  limit = \fR30\fP)"

.SS "src\&.backend\&.lib\&.storage\&.Storage\&.get_book ( self,  id)"

.PP
.nf
Get book from database\&.

Parameters
----------
id : int
    Book ID to filter by\&.

Returns
-------
_result : ScalarResult Object

.fi
.PP
 
.SS "src\&.backend\&.lib\&.storage\&.Storage\&.get_books ( self,  collection = \fRNone\fP,  skip = \fRNone\fP,  limit = \fRNone\fP)"

.PP
.nf
Get books from database\&.

Parameters
----------
collection : int or None
    Collection ID to filter by\&.
skip : int or None
    Number of records to skip (offset)\&.
limit : int or None
    Maximum number of records to return\&.

.fi
.PP
 
.SS "src\&.backend\&.lib\&.storage\&.Storage\&.get_collection ( self,  name)"

.PP
.nf
Get collection from database\&.

Returns
-------
_result : ScalarResult Object

.fi
.PP
 
.SS "src\&.backend\&.lib\&.storage\&.Storage\&.get_collections ( self)"

.PP
.nf
Get collections from database\&.

Returns
-------
_result : ScalarResult Object

.fi
.PP
 
.SS "src\&.backend\&.lib\&.storage\&.Storage\&.get_connection_string ( self)"

.PP
.nf
Get connection string\&.

Engine type references config\&.json:DB_ENGINE\&.

Returns
-------
str : sqlalchemy Connection String

.fi
.PP
 
.SS "src\&.backend\&.lib\&.storage\&.Storage\&.insert_book ( self,  book)"

.PP
.nf
Insert a new book into the database\&.

Parameters
----------
book: dict()
    Book object to insert\&.

Returns
-------
bool
    True on success False on failure

.fi
.PP
 
.SS "src\&.backend\&.lib\&.storage\&.Storage\&.make_collections ( self)"

.PP
.nf
Ensure collections exist and link them to books (many-to-many)\&.
.fi
.PP
 
.SS " dict src\&.backend\&.lib\&.storage\&.Storage\&.parse_advanced_query ( self, str query)"

.PP
.nf
Parse a query like 'title:"dark tower" author:king tags:fantasy'
.fi
.PP
 
.SS " list() src\&.backend\&.lib\&.storage\&.Storage\&.parse_collections_from_path ( self, dict() book)"

.PP
.nf
Parse book path's to determine common folder structure\&.

Stores collections based on shared paths\&.

Parameters
----------
book : dict()
    Book object to parse\&.

Returns
-------
collections : list()
    List of collections\&.

.fi
.PP
 
.SH "Member Data Documentation"
.PP 
.SS "src\&.backend\&.lib\&.storage\&.Storage\&.config = config"

.SS "src\&.backend\&.lib\&.storage\&.Storage\&.db_host = self\&.config\&.db_host"

.SS "src\&.backend\&.lib\&.storage\&.Storage\&.db_port = self\&.config\&.db_port"

.SS "src\&.backend\&.lib\&.storage\&.Storage\&.engine"
\fBInitial value:\fP
.nf
=  create_engine(self\&.get_connection_string(),
                                    pool_pre_ping=True)
.PP
.fi

.SS "src\&.backend\&.lib\&.storage\&.Storage\&.password = self\&.config\&.password"

.SS "src\&.backend\&.lib\&.storage\&.Storage\&.sql = self\&.config\&.catalogue_db"

.SS "src\&.backend\&.lib\&.storage\&.Storage\&.user = self\&.config\&.user"


.SH "Author"
.PP 
Generated automatically by Doxygen for pyShelf Open Source Ebook Server from the source code\&.
