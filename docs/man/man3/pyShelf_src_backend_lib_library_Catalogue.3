.TH "pyShelf.src.backend.lib.library.Catalogue" 3 "Sun Dec 1 2019" "Version 0.2.1" "pyShelf Open Source Ebook Server" \" -*- nroff -*-
.ad l
.nh
.SH NAME
pyShelf.src.backend.lib.library.Catalogue
.SH SYNOPSIS
.br
.PP
.PP
Inherited by \fBpyShelf\&.src\&.backend\&.tests\&.library_test\&.Test_Catalogue\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "def \fB__init__\fP (self, config)"
.br
.ti -1c
.RI "def \fBscan_folder\fP (self, _path=None)"
.br
.ti -1c
.RI "def \fBfilter_books\fP (self)"
.br
.ti -1c
.RI "def \fBextract_metadata\fP (self, book)"
.br
.ti -1c
.RI "def \fBextract_content\fP (self, book_zip, book)"
.br
.ti -1c
.RI "def \fBextract_cover_html\fP (self, book_zip, book)"
.br
.ti -1c
.RI "def \fBextract_cover_image\fP (self, book_zip, book)"
.br
.ti -1c
.RI "def \fBcompare_shelf_current\fP (self)"
.br
.ti -1c
.RI "def \fBimport_books\fP (self, list=None)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "def \fBprocess_book\fP (book)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBfile_list\fP"
.br
.ti -1c
.RI "\fBopf_regx\fP"
.br
.ti -1c
.RI "\fBcover_regx\fP"
.br
.ti -1c
.RI "\fBhtml_regx\fP"
.br
.ti -1c
.RI "\fBroot_dir\fP"
.br
.ti -1c
.RI "\fBbook_folder\fP"
.br
.ti -1c
.RI "\fBbook_shelf\fP"
.br
.ti -1c
.RI "\fBbooks\fP"
.br
.ti -1c
.RI "\fBdb_pointer\fP"
.br
.ti -1c
.RI "\fBconfig\fP"
.br
.in -1c
.SH "Detailed Description"
.PP

.PP
.nf
Decodes book metadata for storage

.fi
.PP

.SH "Member Function Documentation"
.PP
.SS "def pyShelf\&.src\&.backend\&.lib\&.library\&.Catalogue\&.compare_shelf_current ( self)"

.PP
.nf
Calls storage system, gets list of books stored and compares against files on disk

.fi
.PP

.SS "def pyShelf\&.src\&.backend\&.lib\&.library\&.Catalogue\&.extract_content ( self,  book_zip,  book)"

.PP
.nf
Opens epub as zip file filters then stores as list any files matching opf_regx

.fi
.PP

.SS "def pyShelf\&.src\&.backend\&.lib\&.library\&.Catalogue\&.extract_cover_html ( self,  book_zip,  book)"

.PP
.nf
Opens epub as zip file filters then stores as list any files matching html_regx

.fi
.PP

.SS "def pyShelf\&.src\&.backend\&.lib\&.library\&.Catalogue\&.extract_cover_image ( self,  book_zip,  book)"

.PP
.nf
Opens epub as zip file filters then stores as list any files matching cover_regx

.fi
.PP

.SS "def pyShelf\&.src\&.backend\&.lib\&.library\&.Catalogue\&.extract_metadata ( self,  book)"

.PP
.nf
Return extracted metadata and cover picture
book['path'] == Full path to ebook file
book['files'] == list of files from self.process_book(book)

.fi
.PP

.SS "def pyShelf\&.src\&.backend\&.lib\&.library\&.Catalogue\&.filter_books ( self)"

.PP
.nf
Calls scan_folder and filters out book files
Proceeds to call process_book

:returns self._book_list_expanded: json string containing all book metadata

.fi
.PP

.PP
Reimplemented in \fBpyShelf\&.src\&.backend\&.tests\&.library_test\&.Test_Catalogue\fP\&.
.SS "def pyShelf\&.src\&.backend\&.lib\&.library\&.Catalogue\&.import_books ( self,  list = \fCNone\fP)"

.PP
.nf
Main entry point for import operations.
Gets a list of new files via compare_shelf_current.
Iterates over list and inserts new books into database.

.fi
.PP

.SS "def pyShelf\&.src\&.backend\&.lib\&.library\&.Catalogue\&.process_book ( book)\fC [static]\fP"

.PP
.nf
Return dictionary of epub file contents
.fi
.PP

.SS "def pyShelf\&.src\&.backend\&.lib\&.library\&.Catalogue\&.scan_folder ( self,  _path = \fCNone\fP)"

.PP
.nf
Scan folder by _path, allows recurisive scanning

.fi
.PP


.SH "Author"
.PP
Generated automatically by Doxygen for pyShelf Open Source Ebook Server from the source code\&.
